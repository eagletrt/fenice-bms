
.. _program_listing_file_mainboard_Src_error_error_list_ref.c:

Program Listing for File error_list_ref.c
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_mainboard_Src_error_error_list_ref.c>` (``mainboard/Src/error/error_list_ref.c``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #include "error/error_list_ref.h"
   
   #include <stdio.h>
   
   /*  
       This file can contain a variable if and only if:
           1) A peripheral/device can generate data that could have errors
           1.1) This peripheral/device data must be defiend in data.c
           2) The peripheral/device data has an error_type_t descriptor
           2.1) NB two ore error_type_t descriptors can be associated to the same error_list_ref
       then:
       the name of the peripheral/device error list reference is defined as follows:
       node_t* error_list_ref_<insert the relative data name in data.c>;
   */
   
   llist_node error_list_ref_voltages[PACK_CELL_COUNT]     = {NULL};
   llist_node error_list_ref_low_voltages[PACK_CELL_COUNT] = {NULL};
   
   llist_node error_list_ref_temperatures[PACK_TEMP_COUNT]      = {NULL};
   llist_node error_list_ref_high_temperatures[PACK_TEMP_COUNT] = {NULL};
   
   llist_node error_list_ref_current[1]                = {NULL};
   llist_node error_list_ref_cellboards[LTC6813_COUNT] = {NULL};
   llist_node error_list_ref_can[1]                    = {NULL};
   llist_node error_adc_init[1]                        = {NULL};
   llist_node error_adc_timeout[1]                     = {NULL};
   llist_node error_int_voltage_mismatch[1]            = {NULL};
   llist_node error_cellboard_comm[LTC6813_COUNT]      = {NULL};
   llist_node error_cellboard_internal[LTC6813_COUNT]  = {NULL};
   llist_node error_feedback[1]                        = {NULL};
   llist_node error_eeprom_comm[1]                     = {NULL};
   
   llist_node *const error_list_ref_array[ERROR_NUM_ERRORS] = {
       [ERROR_CELL_LOW_VOLTAGE]      = error_list_ref_low_voltages,
       [ERROR_CELL_UNDER_VOLTAGE]    = error_list_ref_voltages,
       [ERROR_CELL_OVER_VOLTAGE]     = error_list_ref_voltages,
       [ERROR_CELL_HIGH_TEMPERATURE] = error_list_ref_temperatures,
       [ERROR_CELL_OVER_TEMPERATURE] = error_list_ref_temperatures,
       [ERROR_OVER_CURRENT]          = error_list_ref_current,
       [ERROR_CAN]                   = error_list_ref_can,
       [ERROR_ADC_INIT]              = error_adc_init,
       [ERROR_ADC_TIMEOUT]           = error_adc_timeout,
       [ERROR_INT_VOLTAGE_MISMATCH]  = error_int_voltage_mismatch,
       [ERROR_CELLBOARD_COMM]        = error_cellboard_comm,
       [ERROR_CELLBOARD_INTERNAL]    = error_cellboard_internal,
       [ERROR_FEEDBACK]              = error_feedback,
       [ERROR_EEPROM_COMM]           = error_eeprom_comm};
   
   llist_node *error_list_ref_array_element(uint16_t id, uint16_t offset) {
       llist_node *tmp = *(error_list_ref_array + id);
       return tmp + offset;
   }
