
.. _program_listing_file_mainboard_Src_adc.c:

Program Listing for File adc.c
==============================

|exhale_lsh| :ref:`Return to documentation for file <file_mainboard_Src_adc.c>` (``mainboard/Src/adc.c``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   /* Includes ------------------------------------------------------------------*/
   #include "adc.h"
   
   /* USER CODE BEGIN 0 */
   
   /* USER CODE END 0 */
   
   ADC_HandleTypeDef hadc1;
   
   /* ADC1 init function */
   void MX_ADC1_Init(void)
   {
   
     /* USER CODE BEGIN ADC1_Init 0 */
   
     /* USER CODE END ADC1_Init 0 */
   
     ADC_ChannelConfTypeDef sConfig = {0};
   
     /* USER CODE BEGIN ADC1_Init 1 */
   
     /* USER CODE END ADC1_Init 1 */
     hadc1.Instance = ADC1;
     hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
     hadc1.Init.Resolution = ADC_RESOLUTION_12B;
     hadc1.Init.ScanConvMode = DISABLE;
     hadc1.Init.ContinuousConvMode = DISABLE;
     hadc1.Init.DiscontinuousConvMode = DISABLE;
     hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
     hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
     hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
     hadc1.Init.NbrOfConversion = 1;
     hadc1.Init.DMAContinuousRequests = DISABLE;
     hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
     if (HAL_ADC_Init(&hadc1) != HAL_OK)
     {
       Error_Handler();
     }
     sConfig.Channel = ADC_CHANNEL_13;
     sConfig.Rank = 1;
     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
     {
       Error_Handler();
     }
     /* USER CODE BEGIN ADC1_Init 2 */
   
     /* USER CODE END ADC1_Init 2 */
   
   }
   
   void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
   {
   
     GPIO_InitTypeDef GPIO_InitStruct = {0};
     if(adcHandle->Instance==ADC1)
     {
     /* USER CODE BEGIN ADC1_MspInit 0 */
   
     /* USER CODE END ADC1_MspInit 0 */
       /* ADC1 clock enable */
       __HAL_RCC_ADC1_CLK_ENABLE();
   
       __HAL_RCC_GPIOC_CLK_ENABLE();
       GPIO_InitStruct.Pin = IP_LOW_Pin|IP_HIGH_Pin;
       GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
       GPIO_InitStruct.Pull = GPIO_NOPULL;
       HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   
     /* USER CODE BEGIN ADC1_MspInit 1 */
   
     /* USER CODE END ADC1_MspInit 1 */
     }
   }
   
   void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
   {
   
     if(adcHandle->Instance==ADC1)
     {
     /* USER CODE BEGIN ADC1_MspDeInit 0 */
   
     /* USER CODE END ADC1_MspDeInit 0 */
       /* Peripheral clock disable */
       __HAL_RCC_ADC1_CLK_DISABLE();
   
       HAL_GPIO_DeInit(GPIOC, IP_LOW_Pin|IP_HIGH_Pin);
   
     /* USER CODE BEGIN ADC1_MspDeInit 1 */
   
     /* USER CODE END ADC1_MspDeInit 1 */
     }
   }
   
   /* USER CODE BEGIN 1 */
   
   /* USER CODE END 1 */
   
   /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
