
.. _program_listing_file_mainboard_Src_adc.c:

Program Listing for File adc.c
==============================

|exhale_lsh| :ref:`Return to documentation for file <file_mainboard_Src_adc.c>` (``mainboard/Src/adc.c``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   /* Includes ------------------------------------------------------------------*/
   #include "adc.h"
   
   /* USER CODE BEGIN 0 */
   
   /* USER CODE END 0 */
   
   ADC_HandleTypeDef hadc2;
   ADC_HandleTypeDef hadc3;
   DMA_HandleTypeDef hdma_adc2;
   DMA_HandleTypeDef hdma_adc3;
   
   /* ADC2 init function */
   void MX_ADC2_Init(void)
   {
   
     /* USER CODE BEGIN ADC2_Init 0 */
   
     /* USER CODE END ADC2_Init 0 */
   
     ADC_ChannelConfTypeDef sConfig = {0};
   
     /* USER CODE BEGIN ADC2_Init 1 */
   
     /* USER CODE END ADC2_Init 1 */
     hadc2.Instance = ADC2;
     hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
     hadc2.Init.Resolution = ADC_RESOLUTION_12B;
     hadc2.Init.ScanConvMode = DISABLE;
     hadc2.Init.ContinuousConvMode = ENABLE;
     hadc2.Init.DiscontinuousConvMode = DISABLE;
     hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
     hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
     hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
     hadc2.Init.NbrOfConversion = 1;
     hadc2.Init.DMAContinuousRequests = ENABLE;
     hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
     if (HAL_ADC_Init(&hadc2) != HAL_OK)
     {
       Error_Handler();
     }
     sConfig.Channel = ADC_CHANNEL_13;
     sConfig.Rank = 1;
     sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
     if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
     {
       Error_Handler();
     }
     /* USER CODE BEGIN ADC2_Init 2 */
   
     /* USER CODE END ADC2_Init 2 */
   
   }
   /* ADC3 init function */
   void MX_ADC3_Init(void)
   {
   
     /* USER CODE BEGIN ADC3_Init 0 */
   
     /* USER CODE END ADC3_Init 0 */
   
     ADC_ChannelConfTypeDef sConfig = {0};
   
     /* USER CODE BEGIN ADC3_Init 1 */
   
     /* USER CODE END ADC3_Init 1 */
     hadc3.Instance = ADC3;
     hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
     hadc3.Init.Resolution = ADC_RESOLUTION_12B;
     hadc3.Init.ScanConvMode = DISABLE;
     hadc3.Init.ContinuousConvMode = ENABLE;
     hadc3.Init.DiscontinuousConvMode = DISABLE;
     hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
     hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
     hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
     hadc3.Init.NbrOfConversion = 1;
     hadc3.Init.DMAContinuousRequests = ENABLE;
     hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
     if (HAL_ADC_Init(&hadc3) != HAL_OK)
     {
       Error_Handler();
     }
     sConfig.Channel = ADC_CHANNEL_12;
     sConfig.Rank = 1;
     sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
     if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
     {
       Error_Handler();
     }
     /* USER CODE BEGIN ADC3_Init 2 */
   
     /* USER CODE END ADC3_Init 2 */
   
   }
   
   void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
   {
   
     GPIO_InitTypeDef GPIO_InitStruct = {0};
     if(adcHandle->Instance==ADC2)
     {
     /* USER CODE BEGIN ADC2_MspInit 0 */
   
     /* USER CODE END ADC2_MspInit 0 */
       /* ADC2 clock enable */
       __HAL_RCC_ADC2_CLK_ENABLE();
   
       __HAL_RCC_GPIOC_CLK_ENABLE();
       GPIO_InitStruct.Pin = IP_HIGH_Pin;
       GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
       GPIO_InitStruct.Pull = GPIO_NOPULL;
       HAL_GPIO_Init(IP_HIGH_GPIO_Port, &GPIO_InitStruct);
   
       /* ADC2 DMA Init */
       /* ADC2 Init */
       hdma_adc2.Instance = DMA2_Stream2;
       hdma_adc2.Init.Channel = DMA_CHANNEL_1;
       hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
       hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
       hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
       hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
       hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
       hdma_adc2.Init.Mode = DMA_CIRCULAR;
       hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
       hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
       if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
       {
         Error_Handler();
       }
   
       __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
   
       /* ADC2 interrupt Init */
       HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
       HAL_NVIC_EnableIRQ(ADC_IRQn);
     /* USER CODE BEGIN ADC2_MspInit 1 */
   
     /* USER CODE END ADC2_MspInit 1 */
     }
     else if(adcHandle->Instance==ADC3)
     {
     /* USER CODE BEGIN ADC3_MspInit 0 */
   
     /* USER CODE END ADC3_MspInit 0 */
       /* ADC3 clock enable */
       __HAL_RCC_ADC3_CLK_ENABLE();
   
       __HAL_RCC_GPIOC_CLK_ENABLE();
       GPIO_InitStruct.Pin = IP_LOW_Pin;
       GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
       GPIO_InitStruct.Pull = GPIO_NOPULL;
       HAL_GPIO_Init(IP_LOW_GPIO_Port, &GPIO_InitStruct);
   
       /* ADC3 DMA Init */
       /* ADC3 Init */
       hdma_adc3.Instance = DMA2_Stream0;
       hdma_adc3.Init.Channel = DMA_CHANNEL_2;
       hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
       hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
       hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
       hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
       hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
       hdma_adc3.Init.Mode = DMA_CIRCULAR;
       hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
       hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
       if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
       {
         Error_Handler();
       }
   
       __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
   
       /* ADC3 interrupt Init */
       HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
       HAL_NVIC_EnableIRQ(ADC_IRQn);
     /* USER CODE BEGIN ADC3_MspInit 1 */
   
     /* USER CODE END ADC3_MspInit 1 */
     }
   }
   
   void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
   {
   
     if(adcHandle->Instance==ADC2)
     {
     /* USER CODE BEGIN ADC2_MspDeInit 0 */
   
     /* USER CODE END ADC2_MspDeInit 0 */
       /* Peripheral clock disable */
       __HAL_RCC_ADC2_CLK_DISABLE();
   
       HAL_GPIO_DeInit(IP_HIGH_GPIO_Port, IP_HIGH_Pin);
   
       /* ADC2 DMA DeInit */
       HAL_DMA_DeInit(adcHandle->DMA_Handle);
   
       /* ADC2 interrupt Deinit */
     /* USER CODE BEGIN ADC2:ADC_IRQn disable */
       /* HAL_NVIC_DisableIRQ(ADC_IRQn); */
     /* USER CODE END ADC2:ADC_IRQn disable */
   
     /* USER CODE BEGIN ADC2_MspDeInit 1 */
   
     /* USER CODE END ADC2_MspDeInit 1 */
     }
     else if(adcHandle->Instance==ADC3)
     {
     /* USER CODE BEGIN ADC3_MspDeInit 0 */
   
     /* USER CODE END ADC3_MspDeInit 0 */
       /* Peripheral clock disable */
       __HAL_RCC_ADC3_CLK_DISABLE();
   
       HAL_GPIO_DeInit(IP_LOW_GPIO_Port, IP_LOW_Pin);
   
       /* ADC3 DMA DeInit */
       HAL_DMA_DeInit(adcHandle->DMA_Handle);
   
       /* ADC3 interrupt Deinit */
     /* USER CODE BEGIN ADC3:ADC_IRQn disable */
       /* HAL_NVIC_DisableIRQ(ADC_IRQn); */
     /* USER CODE END ADC3:ADC_IRQn disable */
   
     /* USER CODE BEGIN ADC3_MspDeInit 1 */
   
     /* USER CODE END ADC3_MspDeInit 1 */
     }
   }
   
   /* USER CODE BEGIN 1 */
   
   /* USER CODE END 1 */
   
   /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
