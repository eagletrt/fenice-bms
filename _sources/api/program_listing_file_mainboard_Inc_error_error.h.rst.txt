
.. _program_listing_file_mainboard_Inc_error_error.h:

Program Listing for File error.h
================================

|exhale_lsh| :ref:`Return to documentation for file <file_mainboard_Inc_error_error.h>` (``mainboard/Inc/error/error.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef ERROR_H
   #define ERROR_H
   
   #include <inttypes.h>
   #include <stdbool.h>
   
   #include "llist.h"
   
   #define error_toggle_check(condition, error_type, index) \
       if ((condition)) {                                   \
           error_set((error_type), (index), HAL_GetTick()); \
       } else {                                             \
           error_unset((error_type), (index));              \
       }
   
   typedef enum {
       ERROR_LTC_PEC_ERROR,
   
       ERROR_CELL_UNDER_VOLTAGE,
       ERROR_CELL_OVER_VOLTAGE,
       ERROR_CELL_OVER_TEMPERATURE,
   
       ERROR_OVER_CURRENT,
       ERROR_CAN,
   
       ERROR_ADC_INIT,
       ERROR_ADC_TIMEOUT,
       ERROR_INT_VOLTAGE_MISMATCH,
   
       ERROR_FEEDBACK_HARD,
       ERROR_FEEDBACK_SOFT,
   
       ERROR_NUM_ERRORS
   } error_id;
   
   typedef enum {
       SOFT = UINT32_MAX,
       SHORT = 500,
       REGULAR = 1000,
       INSTANT = 0
   } error_timeout;
   
   typedef enum {
       ERROR_ACTIVE,
       ERROR_FATAL
   } error_state;
   
   typedef struct {
       error_id id;    /* Defines the type of error */
       uint8_t offset; /* Identifies different instances of a type */
       error_state state;
       uint32_t timestamp; /* Last time the error activated */
   } error_t;
   
   extern llist er_list;
   
   void error_init();
   void error_init_error(error_t *error, error_id id, uint8_t offset, uint32_t timestamp);
   bool error_set(error_id type, uint8_t offset, uint32_t now);
   bool error_unset(error_id type, uint8_t offset);
   
   uint8_t error_count();
   void error_dump(error_t errors[]);
   bool compare_timeouts(error_t *a, error_t *b);
   
   #endif /* ERROR_H_ */
