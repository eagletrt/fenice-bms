
.. _program_listing_file_mainboard_Src_system_stm32g4xx.c:

Program Listing for File system_stm32g4xx.c
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_mainboard_Src_system_stm32g4xx.c>` (``mainboard/Src/system_stm32g4xx.c``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #include "stm32g4xx.h"
   
   #if !defined  (HSE_VALUE)
     #define HSE_VALUE     8000000U 
   #endif /* HSE_VALUE */
   
   #if !defined  (HSI_VALUE)
     #define HSI_VALUE    16000000U 
   #endif /* HSI_VALUE */
   
   /************************* Miscellaneous Configuration ************************/
   /* #define VECT_TAB_SRAM */
   #define VECT_TAB_OFFSET  0x00UL 
   /******************************************************************************/
   
     /* The SystemCoreClock variable is updated in three ways:
         1) by calling CMSIS function SystemCoreClockUpdate()
         2) by calling HAL API function HAL_RCC_GetHCLKFreq()
         3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
            Note: If you use this function to configure the system clock; then there
                  is no need to call the 2 first functions listed above, since SystemCoreClock
                  variable is updated automatically.
     */
     uint32_t SystemCoreClock = HSI_VALUE;
   
     const uint8_t AHBPrescTable[16] = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
     const uint8_t APBPrescTable[8] =  {0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U};
   
   void SystemInit(void)
   {
     /* FPU settings ------------------------------------------------------------*/
     #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
       SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
     #endif
   
     /* Configure the Vector Table location add offset address ------------------*/
   #ifdef VECT_TAB_SRAM
     SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
   #else
     SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
   #endif
   }
   
   void SystemCoreClockUpdate(void)
   {
     uint32_t tmp, pllvco, pllr, pllsource, pllm;
   
     /* Get SYSCLK source -------------------------------------------------------*/
     switch (RCC->CFGR & RCC_CFGR_SWS)
     {
       case 0x04:  /* HSI used as system clock source */
         SystemCoreClock = HSI_VALUE;
         break;
   
       case 0x08:  /* HSE used as system clock source */
         SystemCoreClock = HSE_VALUE;
         break;
   
       case 0x0C:  /* PLL used as system clock  source */
         /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
            SYSCLK = PLL_VCO / PLLR
            */
         pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
         pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1U ;
         if (pllsource == 0x02UL) /* HSI used as PLL clock source */
         {
           pllvco = (HSI_VALUE / pllm);
         }
         else                   /* HSE used as PLL clock source */
         {
           pllvco = (HSE_VALUE / pllm);
         }
         pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
         pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1U) * 2U;
         SystemCoreClock = pllvco/pllr;
         break;
   
       default:
         break;
     }
     /* Compute HCLK clock frequency --------------------------------------------*/
     /* Get HCLK prescaler */
     tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     /* HCLK clock frequency */
     SystemCoreClock >>= tmp;
   }
   
   
   /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
   
