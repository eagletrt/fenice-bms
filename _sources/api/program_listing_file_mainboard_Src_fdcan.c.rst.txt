
.. _program_listing_file_mainboard_Src_fdcan.c:

Program Listing for File fdcan.c
================================

|exhale_lsh| :ref:`Return to documentation for file <file_mainboard_Src_fdcan.c>` (``mainboard/Src/fdcan.c``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   /* Includes ------------------------------------------------------------------*/
   #include "fdcan.h"
   
   /* USER CODE BEGIN 0 */
   
   /* USER CODE END 0 */
   
   FDCAN_HandleTypeDef hfdcan1;
   
   /* FDCAN1 init function */
   void MX_FDCAN1_Init(void) {
       /* USER CODE BEGIN FDCAN1_Init 0 */
   
       /* USER CODE END FDCAN1_Init 0 */
   
       /* USER CODE BEGIN FDCAN1_Init 1 */
   
       /* USER CODE END FDCAN1_Init 1 */
       hfdcan1.Instance = FDCAN1;
       hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV10;
       hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
       hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
       hfdcan1.Init.AutoRetransmission = ENABLE;
       hfdcan1.Init.TransmitPause = DISABLE;
       hfdcan1.Init.ProtocolException = ENABLE;
       hfdcan1.Init.NominalPrescaler = 1;
       hfdcan1.Init.NominalSyncJumpWidth = 1;
       hfdcan1.Init.NominalTimeSeg1 = 2;
       hfdcan1.Init.NominalTimeSeg2 = 14;
       hfdcan1.Init.DataPrescaler = 1;
       hfdcan1.Init.DataSyncJumpWidth = 1;
       hfdcan1.Init.DataTimeSeg1 = 2;
       hfdcan1.Init.DataTimeSeg2 = 14;
       hfdcan1.Init.StdFiltersNbr = 0;
       hfdcan1.Init.ExtFiltersNbr = 0;
       hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
       if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK) {
           Error_Handler();
       }
       /* USER CODE BEGIN FDCAN1_Init 2 */
   
       /* USER CODE END FDCAN1_Init 2 */
   }
   
   void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle) {
       GPIO_InitTypeDef GPIO_InitStruct = {0};
       if (fdcanHandle->Instance == FDCAN1) {
           /* USER CODE BEGIN FDCAN1_MspInit 0 */
   
           /* USER CODE END FDCAN1_MspInit 0 */
           /* FDCAN1 clock enable */
           __HAL_RCC_FDCAN_CLK_ENABLE();
   
           __HAL_RCC_GPIOB_CLK_ENABLE();
           GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
           GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
           GPIO_InitStruct.Pull = GPIO_NOPULL;
           GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
           GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
           HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   
           /* USER CODE BEGIN FDCAN1_MspInit 1 */
   
           /* USER CODE END FDCAN1_MspInit 1 */
       }
   }
   
   void HAL_FDCAN_MspDeInit(FDCAN_HandleTypeDef* fdcanHandle) {
       if (fdcanHandle->Instance == FDCAN1) {
           /* USER CODE BEGIN FDCAN1_MspDeInit 0 */
   
           /* USER CODE END FDCAN1_MspDeInit 0 */
           /* Peripheral clock disable */
           __HAL_RCC_FDCAN_CLK_DISABLE();
   
           HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8 | GPIO_PIN_9);
   
           /* FDCAN1 interrupt Deinit */
           HAL_NVIC_DisableIRQ(FDCAN1_IT0_IRQn);
           HAL_NVIC_DisableIRQ(FDCAN1_IT1_IRQn);
           /* USER CODE BEGIN FDCAN1_MspDeInit 1 */
   
           /* USER CODE END FDCAN1_MspDeInit 1 */
       }
   }
   
   /* USER CODE BEGIN 1 */
   void FDCAN1_Init(void) {
       if (HAL_GPIO_ReadPin(CHARGE_GPIO_Port, CHARGE_Pin)) {
           hfdcan1.Instance = FDCAN1;
           hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
           hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
           hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
           hfdcan1.Init.AutoRetransmission = ENABLE;
           hfdcan1.Init.TransmitPause = DISABLE;
           hfdcan1.Init.ProtocolException = DISABLE;
           hfdcan1.Init.NominalPrescaler = 1;
           hfdcan1.Init.NominalSyncJumpWidth = 1;
           hfdcan1.Init.NominalTimeSeg1 = 2;
           hfdcan1.Init.NominalTimeSeg2 = 2;
           hfdcan1.Init.DataPrescaler = 1;
           hfdcan1.Init.DataSyncJumpWidth = 1;
           hfdcan1.Init.DataTimeSeg1 = 1;
           hfdcan1.Init.DataTimeSeg2 = 1;
           hfdcan1.Init.StdFiltersNbr = 0;
           hfdcan1.Init.ExtFiltersNbr = 0;
           hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
   
       } else {
           MX_FDCAN1_Init();
       }
   }
   /* USER CODE END 1 */
   
   /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
